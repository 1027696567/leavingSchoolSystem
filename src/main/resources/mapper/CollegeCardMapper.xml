<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.CollegeCardMapper">
  <resultMap id="BaseResultMap" type="com.example.model.CollegeCard">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="stu_info_id" jdbcType="BIGINT" property="stuInfoId" />
    <result column="cancel_date" jdbcType="DATE" property="cancelDate" />
    <result column="money" jdbcType="BIGINT" property="money" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="active" jdbcType="TINYINT" property="active" />
    <result column="create_user" jdbcType="VARCHAR" property="createUser" />
    <result column="create_time" jdbcType="DATE" property="createTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, stu_info_id, cancel_date, money, `status`, active, create_user, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from college_card
    where id = #{id,jdbcType=BIGINT}
  </select>
  <resultMap id="CollegeCard" type="com.example.model.CollegeCardInfo">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="stu_info_id" jdbcType="BIGINT" property="stuInfoId" />
    <result column="cancel_date" jdbcType="TIMESTAMP" property="cancelDate" />
    <result column="money" jdbcType="BIGINT" property="money" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="active" jdbcType="TINYINT" property="active" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="identity_id" jdbcType="BIGINT" property="identityId" />
    <result column="stu_id" jdbcType="BIGINT" property="stuId" />
    <result column="sex" jdbcType="TINYINT" property="sex" />
    <result column="edu_sys" jdbcType="TINYINT" property="eduSys" />
    <result column="admission_date" jdbcType="DATE" property="admissionDate" />
    <result column="dept_name" jdbcType="VARCHAR" property="deptName" />
    <result column="profession_name" jdbcType="VARCHAR" property="professionName" />
    <result column="class_id" jdbcType="BIGINT" property="classId" />
    <result column="college_card_audit_res_id" jdbcType="BIGINT" property="collegeCardAuditResId" />
    <result column="college_card_audit_res_status" jdbcType="TINYINT" property="collegeCardAuditResStatus" />
    <result column="college_card_audit_res_content" jdbcType="VARCHAR" property="collegeCardAuditResContent" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_user" jdbcType="VARCHAR" property="createUser" />
  </resultMap>
  <select id="selectByUsername" resultMap="CollegeCard">
    select
    b.id as stu_info_id, b.`name`,b.identity_id,b.stu_id,b.sex,b.edu_sys,b.admission_date, b.class_id,
    c.id, c.cancel_date, c.money, c.`status`, c.active,
    d.`name` as dept_name ,
    e.`name` as profession_name,
    f.id as college_card_audit_res_id, f.`status` as college_card_audit_res_status, f.content as college_card_audit_res_content, f.create_time, f.create_user
    from (select id from sys_user where username = #{username,jdbcType=VARCHAR}) as a
    LEFT JOIN stu_info as b on a.id = b.user_id
    LEFT JOIN college_card as c on b.id = c.stu_info_id
    LEFT JOIN department as d on b.dept_id = d.dept_id
    LEFT JOIN profession as e on b.profession_id = e.profession_id
    LEFT JOIN college_card_audit_res as f on c.id = f.college_card_id
    WHERE c.active = 1
  </select>
  <select id="selectByCondition" resultMap="CollegeCard">
    select
    b.id as stu_info_id, b.name,b.identity_id,b.stu_id,b.sex,b.edu_sys,b.admission_date, b.class_id,
    a.id, a.cancel_date, a.money, a.`status`, a.active,
    d.`name` as dept_name ,
    e.`name` as profession_name,
    f.id as college_card_audit_res_id, f.`status` as college_card_audit_res_status, f.content as college_card_audit_res_content, f.create_time, f.create_user
    from
    (select *
    from college_card
    <if test="status != null">WHERE status = #{status,jdbcType=TINYINT}</if>
    ) as a
    INNER JOIN
    (select
    id, user_id, name, identity_id, stu_id, sex, edu_sys, admission_date, profession_id, dept_id, class_id
    from stu_info
    <trim prefix="WHERE" prefixOverrides="AND | OR">
      <if test="stuId != null">AND stu_id = #{stuId,jdbcType=BIGINT}</if>
      <if test="classId != null">AND class_id = #{classId,jdbcType=BIGINT}</if>
    </trim>
    ) as b on a.stu_info_id = b.id
    INNER JOIN sys_user as c on b.user_id = c.id
    LEFT JOIN department as d on b.dept_id = d.dept_id
    LEFT JOIN profession as e on b.profession_id = e.profession_id
    LEFT JOIN college_card_audit_res as f on a.id = f.college_card_id
    WHERE a.active = 1
    <if test="collegeCardAuditResStatus != null">AND f.status = #{collegeCardAuditResStatus,jdbcType=TINYINT}</if>
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from college_card
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.example.model.CollegeCard" useGeneratedKeys="true">
    insert into college_card (stu_info_id, cancel_date, money, 
      `status`, active, create_user, 
      create_time)
    values (#{stuInfoId,jdbcType=BIGINT}, #{cancelDate,jdbcType=DATE}, #{money,jdbcType=BIGINT}, 
      #{status,jdbcType=TINYINT}, #{active,jdbcType=TINYINT}, #{createUser,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=DATE})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.example.model.CollegeCard" useGeneratedKeys="true">
    insert into college_card
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="stuInfoId != null">
        stu_info_id,
      </if>
      <if test="cancelDate != null">
        cancel_date,
      </if>
      <if test="money != null">
        money,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="active != null">
        active,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="stuInfoId != null">
        #{stuInfoId,jdbcType=BIGINT},
      </if>
      <if test="cancelDate != null">
        #{cancelDate,jdbcType=DATE},
      </if>
      <if test="money != null">
        #{money,jdbcType=BIGINT},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="active != null">
        #{active,jdbcType=TINYINT},
      </if>
      <if test="createUser != null">
        #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=DATE},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.model.CollegeCard">
    update college_card
    <set>
      <if test="stuInfoId != null">
        stu_info_id = #{stuInfoId,jdbcType=BIGINT},
      </if>
      <if test="cancelDate != null">
        cancel_date = #{cancelDate,jdbcType=DATE},
      </if>
      <if test="money != null">
        money = #{money,jdbcType=BIGINT},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=TINYINT},
      </if>
      <if test="active != null">
        active = #{active,jdbcType=TINYINT},
      </if>
      <if test="createUser != null">
        create_user = #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=DATE},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.model.CollegeCard">
    update college_card
    set stu_info_id = #{stuInfoId,jdbcType=BIGINT},
      cancel_date = #{cancelDate,jdbcType=DATE},
      money = #{money,jdbcType=BIGINT},
      `status` = #{status,jdbcType=TINYINT},
      active = #{active,jdbcType=TINYINT},
      create_user = #{createUser,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=DATE}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>